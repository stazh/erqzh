<?xml version="1.0" encoding="UTF-8"?>
<project name="rqzh2" default="xar">
  <xmlproperty file="expath-pkg.xml"/>
  <!-- Adjust path below to match location of your npm binary -->
  <property name="npm" value="/usr/local/bin/npm"/>
  <property name="project.version" value="${package(version)}"/>
  <property name="project.app" value="${package(abbrev)}"/>
  <property name="build.dir" value="build"/>
  <property name="scripts.dir" value="node_modules/@teipublisher/pb-components/dist"/>
  <property name="git.repo.path" value="${basedir}/.git"/>
  <available file="${git.repo.path}" type="dir" property="git.present"/>
  <target name="clean">
    <delete dir="${build}"/>
    <delete dir="resources/scripts" includes="*.js *.map"/>
    <delete dir="resources/images/leaflet"/>
    <delete dir="resources/images/openseadragon"/>
    <delete dir="resources/i18n/common"/>
    <delete dir="resources/css" includes="leaflet/** prismjs/**"/>
    <delete dir="resources/lib"/>
  </target>
  <target name="prepare">
    <copy todir="resources/scripts">
      <fileset dir="${scripts.dir}">
        <include name="*.js"/>
        <include name="*.map"/>
      </fileset>
    </copy>
    <copy file="node_modules/leaflet/dist/leaflet.css" todir="resources/css/leaflet"/>
    <copy todir="resources/images/leaflet">
      <fileset dir="node_modules/leaflet/dist/images"/>
    </copy>
    <copy todir="resources/images/openseadragon">
      <fileset dir="node_modules/openseadragon/build/openseadragon/images"/>
    </copy>
    <copy file="node_modules/openseadragon/build/openseadragon/openseadragon.min.js" todir="resources/lib"/>
    <copy todir="resources/css/prismjs">
      <fileset dir="node_modules/prismjs/themes"/>
    </copy>
    <copy todir="resources/i18n/common">
      <fileset dir="node_modules/@teipublisher/pb-components/i18n/common"/>
    </copy>
  </target>
  <target name="xar-local" depends="npm.install,prepare,xar"/>
  <target name="xar" depends="clean,git.revision">
    <mkdir dir="${build.dir}"/>
    <copy todir="${basedir}" overwrite="true" verbose="true">
      <fileset file="*.xml.tmpl"/>
      <filterchain>
        <replacetokens>
          <token key="name" value="${app.name}"/>
          <token key="version" value="${app.version}"/>
          <token key="url" value="${app.url}"/>
          <token key="title" value="${app.title}"/>
          <token key="commit-id" value="${git.revision}"/>
          <token key="commit-time" value="${git.time}"/>
        </replacetokens>
        <tokenfilter>
          <!-- until we move template processing to XSLT, take care with special characters -->
          <replacestring from="&amp;" to="&amp;amp;"/>
        </tokenfilter>
      </filterchain>
      <globmapper from="*.tmpl" to="*"/>
    </copy>
    <zip basedir="." destfile="${build.dir}/${project.app}-${project.version}.xar" excludes="${build.dir}/** node_modules/** .* .idea/** .duncdrum/** builds/** cypress/videos/** cypress/screenshots/** .devcontainer/**"/>
  </target>
  <target name="xar-complete" depends="npm.install,xar"/>
  <target name="npm.install">
    <exec executable="${npm}" outputproperty="npm.output">
      <arg line="install"/>
    </exec>
    <echo message="${npm.output}"/>
  </target>
  <target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">
    <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
      <arg value="--git-dir=${git.repo.path}"/>
      <arg value="rev-parse"/>
      <arg value="HEAD"/>
    </exec>
    <condition property="repository.version" value="${git.revision}" else="unknown">
      <and>
        <isset property="git.revision"/>
        <length string="${git.revision}" trim="yes" length="0" when="greater"/>
      </and>
    </condition>
    <echo>Git repo: ${repository.version}</echo>
    <exec executable="git" outputproperty="git.time" failifexecutionfails="false" errorproperty="">
      <arg value="--git-dir=${git.repo.path}"/>
      <arg value="show"/>
      <arg value="-s"/>
      <arg value="--format=%ct"/>
      <arg value="${git.revision}"/>
    </exec>
    <echo>Git time: ${git.time}</echo>
  </target>
</project>
